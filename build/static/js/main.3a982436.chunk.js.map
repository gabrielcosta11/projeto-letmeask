{"version":3,"sources":["services/firebase.ts","contexts/AuthContext.tsx","hooks/useAuth.ts","assets/images/illustration.svg","assets/images/logo.svg","assets/images/google-icon.svg","components/Button.tsx","utilities/Reference.ts","pages/Home.tsx","pages/NewRoom.tsx","components/Question.tsx","assets/images/copy.svg","components/RoomCode.tsx","hooks/useRoom.ts","pages/Room.tsx","assets/images/check.svg","assets/images/answer.svg","assets/images/delete.svg","pages/AdminRoom.tsx","App.tsx","index.tsx"],"names":["auth","initializeApp","apiKey","process","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","Auth","database","db","AuthContext","createContext","AuthContextProvider","props","useState","user","setUser","a","console","log","provider","GoogleAuthProvider","signInWithPopup","getAuth","result","displayName","photoURL","uid","Error","id","name","avatar","useEffect","unsubscribe","onAuthStateChanged","Provider","value","singInWithGoogle","children","useAuth","useContext","Button","isOutlined","className","Reference","ref","getDatabase","Home","history","useHistory","roomCode","setRoomCode","push","event","preventDefault","trim","roomRef","get","exists","alert","child","endedAtExists","src","illustrationImg","alt","logoImg","onClick","googleIconImg","onSubmit","type","placeholder","onChange","target","NewRoom","newRoom","setNewRoom","title","authorId","firebaseRoom","key","to","Question","content","author","isAnswered","isHighlighted","cx","answered","highlighted","RoomCode","navigator","clipboard","writeText","code","copyImg","useRoom","roomId","questions","setQuestions","setTitle","onValue","room","databaseRoom","val","firebaseQuestions","parseQuestions","Object","entries","map","likeCount","values","likes","length","likeId","keys","off","Room","useParams","newQuestion","setNewQuestion","question","questionRef","questionId","newLike","remove","disabled","aria-label","handleLikeQuestion","width","height","viewBox","fill","xmlns","d","stroke","strokeWidth","strokeLinecap","strokeLinejoin","AdminRoom","update","endedAt","Date","window","confirm","handleCheckQuestionAsAnswered","checkImg","handleHighlightQuestion","answerImg","handleDeleteQuestion","deleteImg","App","path","exact","component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3a982436.chunk.js","sourcesContent":["import {initializeApp} from 'firebase/app';\r\nimport * as db from 'firebase/database'\r\nimport * as Auth from 'firebase/auth';\r\nimport { Database } from '@firebase/database';\r\n\r\n\r\n\r\nconst firebaseApp = initializeApp(\r\n    {\r\n        apiKey: process.env.REACT_APP_API_KEY,\r\n        authDomain: process.env.REACT_APP_AUTH_DOMAIN,\r\n        databaseURL: process.env.REACT_APP_DATABASE_URL,\r\n        projectId: process.env.REACT_APP_PROJECT_ID,\r\n        storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\r\n        messagingSenderId: process.env.REACT_APP_MESSAGING_SENDER_ID,\r\n        appId: process.env.REACT_APP_APP_ID\r\n    }\r\n)\r\n\r\nconst auth = Auth\r\nconst database = db\r\n\r\n\r\n\r\nexport {auth, database}\r\n\r\n\r\n\r\n","import { createContext, ReactNode, useEffect, useState } from \"react\";\r\nimport { auth } from \"../services/firebase\";\r\n\r\n\r\ntype UserType = {\r\n    id: string,\r\n    name: string,\r\n    avatar: string\r\n}\r\n\r\ntype AuthContextType = {\r\n    user: UserType | undefined;\r\n    singInWithGoogle: () => Promise<void>\r\n}\r\n\r\nexport const AuthContext = createContext({} as AuthContextType);\r\n\r\ntype AuthContextProviderProps = {\r\n    children: ReactNode\r\n}\r\n\r\nfunction AuthContextProvider(props: AuthContextProviderProps) {\r\n    const [user, setUser] = useState<UserType>()\r\n\r\n    useEffect(() => {\r\n        const unsubscribe = auth.onAuthStateChanged(auth.getAuth(), user => {\r\n            if (user) {\r\n                const { displayName, photoURL, uid } = user\r\n\r\n                if (!displayName || !photoURL) {\r\n                    throw new Error('Missing information from Google Account')\r\n                }\r\n\r\n                setUser({\r\n                    id: uid,\r\n                    name: displayName,\r\n                    avatar: photoURL\r\n                })\r\n            }\r\n        })\r\n\r\n        return () => {\r\n            unsubscribe()\r\n        }\r\n    }, [])\r\n\r\n    async function singInWithGoogle() {\r\n        console.log('chegou!')\r\n\r\n        const provider = new auth.GoogleAuthProvider();\r\n\r\n        const result = await auth.signInWithPopup(auth.getAuth(), provider)\r\n\r\n        if (result.user) {\r\n            const { displayName, photoURL, uid } = result.user\r\n\r\n            if (!displayName || !photoURL) {\r\n                throw new Error('Missing information from Google Account')\r\n            }\r\n\r\n            setUser({\r\n                id: uid,\r\n                name: displayName,\r\n                avatar: photoURL\r\n            })\r\n        }\r\n        console.log('final')\r\n    }\r\n\r\n\r\n    return (\r\n        <AuthContext.Provider value={{ user, singInWithGoogle }}>\r\n            {props.children}\r\n        </AuthContext.Provider>\r\n    )\r\n}\r\n\r\nexport { AuthContextProvider }","import { createContext, useContext } from \"react\";\r\nimport { AuthContext } from \"../contexts/AuthContext\";\r\n\r\nfunction useAuth() {\r\n    const value = useContext(AuthContext)\r\n\r\n    return value\r\n}\r\n\r\nexport {useAuth}","export default __webpack_public_path__ + \"static/media/illustration.ae7276f0.svg\";","export default __webpack_public_path__ + \"static/media/logo.a88331cb.svg\";","export default __webpack_public_path__ + \"static/media/google-icon.df15d8e5.svg\";","import { ButtonHTMLAttributes } from \"react\"\r\n\r\nimport '../styles/button.scss'\r\n\r\ntype ButtomProps = ButtonHTMLAttributes<HTMLButtonElement> & {\r\n    isOutlined?: boolean,\r\n}\r\n\r\nfunction Button({isOutlined = false, ...props}: ButtomProps) {\r\n    return (\r\n        <button className={`button ${isOutlined ? 'outlined' : ''}`} {...props}/>\r\n    )\r\n}\r\n\r\nexport {Button}","\r\nimport { database } from \"../services/firebase\"\r\n\r\n\r\nfunction Reference(ref: string) {\r\n    return(\r\n       database.ref(database.getDatabase(), ref)\r\n    )\r\n    \r\n}\r\n\r\nexport {Reference}","import { useAuth } from '../hooks/useAuth';\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nimport illustrationImg from \"../assets/images/illustration.svg\";\r\nimport logoImg from \"../assets/images/logo.svg\";\r\nimport googleIconImg from \"../assets/images/google-icon.svg\"\r\n\r\nimport { Button } from \"../components/Button\";\r\n\r\nimport '../styles/auth.scss'\r\nimport { FormEvent, useState } from 'react';\r\nimport { database } from '../services/firebase';\r\nimport { Reference } from '../utilities/Reference';\r\nimport { child } from '@firebase/database';\r\n\r\n\r\nfunction Home() {\r\n    const history = useHistory();\r\n    const {user, singInWithGoogle} = useAuth()\r\n    const [roomCode, setRoomCode] = useState('')\r\n\r\n    async function handleCreateRoom() {\r\n        if (!user) {\r\n            await singInWithGoogle()\r\n            history.push('/rooms/new')\r\n        } else {\r\n            history.push('/rooms/new')\r\n        }\r\n    }\r\n\r\n    async function handleJoinRoom(event: FormEvent) {\r\n        event.preventDefault()\r\n\r\n        if (roomCode.trim() === '') {\r\n            return\r\n        }\r\n\r\n        const roomRef = Reference(`rooms/${roomCode}`)\r\n        const roomRefExists = (await database.get(roomRef)).exists()\r\n        \r\n        if (!roomRefExists) {\r\n            alert('Room does not exists')\r\n            return\r\n        }\r\n\r\n        const endedAtExists = (await database.get(child(roomRef, \"endedAt\"))).exists()\r\n        console.log(endedAtExists)\r\n\r\n        if(endedAtExists) {\r\n            alert('Room alredy closed.')\r\n            return\r\n        }\r\n\r\n        history.push(`/rooms/${roomCode}`)\r\n    }\r\n\r\n    return (\r\n        <div id=\"page-auth\">\r\n            <aside>\r\n                <img src={illustrationImg} alt=\"Ilustração simbolizando perguntas e respotas\" />\r\n                <strong>Cria salas de Q&amp;A ao vivo</strong>\r\n                <p>Tire as dúvidas da sua audiência em tempo-real</p>\r\n            </aside>\r\n            <main>\r\n                <div className=\"main-content\">\r\n                    <img src={logoImg} alt=\"Letmeask\" />\r\n                    <button className=\"create-room\" onClick={handleCreateRoom}>\r\n                        <img src={googleIconImg} alt=\"Logo do Google\" />\r\n                        Crie sua sala com o Google\r\n                    </button>\r\n                    <div className=\"separetor\">ou entre em uma sala</div>\r\n                    <form onSubmit={handleJoinRoom}>\r\n                        <input \r\n                            type=\"text\" \r\n                            placeholder=\"Digite o código da sala\"\r\n                            onChange={event => setRoomCode(event.target.value)}\r\n                            value={roomCode}\r\n                        />\r\n                        <Button type=\"submit\">\r\n                            Entrar na sala\r\n                        </Button>\r\n                    </form>\r\n                </div>\r\n            </main>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport {Home}","import { Link, useHistory } from \"react-router-dom\";\r\nimport { FormEvent, useState } from \"react\";\r\n\r\n\r\nimport illustrationImg from \"../assets/images/illustration.svg\";\r\nimport logoImg from \"../assets/images/logo.svg\";\r\n\r\nimport { Button } from \"../components/Button\";\r\n\r\nimport '../styles/auth.scss'\r\nimport { useAuth } from \"../hooks/useAuth\";\r\nimport { database } from \"../services/firebase\";\r\nimport { Reference } from \"../utilities/Reference\";\r\n\r\nfunction NewRoom() {\r\n    const {user} = useAuth()\r\n    const history = useHistory()\r\n    const [newRoom, setNewRoom] = useState('')\r\n\r\n    async function handleCreateRoom(event: FormEvent) {\r\n        event.preventDefault()\r\n\r\n        if (newRoom.trim() === '') {\r\n            return\r\n        }\r\n\r\n        const roomRef = await Reference('rooms')\r\n\r\n        const firebaseRoom = await database.push(roomRef, {\r\n            title: newRoom,\r\n            authorId: user?.id\r\n        })\r\n\r\n        history.push(`/admin/rooms/${firebaseRoom.key}`)\r\n    }\r\n\r\n    return (\r\n        <div id=\"page-auth\">\r\n            <aside>\r\n                <img src={illustrationImg} alt=\"Ilustração simbolizando perguntas e respotas\" />\r\n                <strong>Cria salas de Q&amp;A ao vivo</strong>\r\n                <p>Tire as dúvidas da sua audiência em tempo-real</p>\r\n            </aside>\r\n            <main>\r\n                <div className=\"main-content\">\r\n                    <img src={logoImg} alt=\"Letmeask\" />\r\n                    <h2>Criar uma nova sala</h2>\r\n                    <form onSubmit={handleCreateRoom}>\r\n                        <input \r\n                            type=\"text\" \r\n                            placeholder=\"Nome da sala\"\r\n                            onChange={event => setNewRoom(event.target.value)}\r\n                            value={newRoom}\r\n                        />\r\n                        <Button type=\"submit\">\r\n                            Criar sala\r\n                        </Button>\r\n                    </form>\r\n                    <p>\r\n                        Quer entrar em uma sala existente? <Link to=\"/\">clique aqui</Link>\r\n                    </p>\r\n                </div>\r\n            </main>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport {NewRoom}","import { ReactNode } from \"react\"\r\n\r\nimport cx from \"classnames\"\r\n\r\nimport \"../styles/question.scss\"\r\n\r\ntype QuestionProps = {\r\n    content: string,\r\n    author: {\r\n        name: string,\r\n        avatar: string\r\n    };\r\n    children?: ReactNode,\r\n    isAnswered?: boolean,\r\n    isHighlighted?: boolean,\r\n}\r\n\r\nfunction Question({content, author, children, isAnswered=false, isHighlighted=false}: QuestionProps) {\r\n    return (\r\n        <div className={cx(\r\n            'question',\r\n            {answered: isAnswered},\r\n            {highlighted: isHighlighted && !isAnswered})}>\r\n            <p>{content}</p>\r\n            <footer>\r\n                <div className=\"user-info\">\r\n                    <img src={author.avatar} alt={author.name} />\r\n                    <span>{author.name}</span>\r\n                </div>\r\n                <div>\r\n                    {children}\r\n                </div>\r\n            </footer>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport {Question}","export default __webpack_public_path__ + \"static/media/copy.2f36f99e.svg\";","import copyImg from \"../assets/images/copy.svg\"\r\n\r\nimport \"../styles/room-code.scss\"\r\n\r\ntype RoomCodeProps = {\r\n    code: string\r\n}\r\n\r\nfunction RoomCode(props: RoomCodeProps) {\r\n    function copyRoomCodeToClipBoard() {\r\n        navigator.clipboard.writeText(props.code)\r\n    }\r\n\r\n    return (\r\n        <button className=\"room-code\" onClick={copyRoomCodeToClipBoard}>\r\n            <div>\r\n                <img src={copyImg} alt=\"Copy room code\" />\r\n            </div>\r\n            <span>Sala #{props.code}</span>\r\n        </button>\r\n    )\r\n}\r\n\r\nexport {RoomCode}","import { stringify } from \"querystring\"\r\nimport { useEffect, useState } from \"react\"\r\nimport { database } from \"../services/firebase\"\r\nimport { Reference } from \"../utilities/Reference\"\r\nimport { useAuth } from \"./useAuth\"\r\n\r\ntype QuestionType = {\r\n    id: string\r\n    author: {\r\n        name: string,\r\n        avatar: string\r\n    },\r\n    content: string,\r\n    isAnswered: boolean,\r\n    isHighlighted: boolean,\r\n    likeCount: number,\r\n    likeId: string | undefined\r\n}\r\n\r\ntype FirebaseQuestions = Record<string, {\r\n    author: {\r\n        name: string,\r\n        avatar: string\r\n    },\r\n    content: string,\r\n    isAnswered: boolean,\r\n    isHighlighted: boolean,\r\n    likes: Record<string, {\r\n        athorId: string\r\n    }>\r\n}>\r\n\r\nfunction useRoom(roomId: string) {\r\n    const {user} = useAuth()\r\n    const [questions, setQuestions] = useState<QuestionType[]>([])\r\n    const [title, setTitle] = useState('')\r\n\r\n    useEffect(() => {\r\n        const roomRef = Reference(`rooms/${roomId}`)\r\n\r\n        database.onValue(roomRef, room => {\r\n            const databaseRoom = room.val()\r\n            const firebaseQuestions: FirebaseQuestions = databaseRoom.questions ?? {};\r\n\r\n\r\n            const parseQuestions = Object.entries(firebaseQuestions).map(([key, value]) => {\r\n                return {\r\n                    id: key,\r\n                    content: value.content,\r\n                    author: value.author,\r\n                    isHighlighted: value.isHighlighted,\r\n                    isAnswered: value.isAnswered,\r\n                    likeCount: Object.values(value.likes ?? {}).length,\r\n                    likeId: Object.keys(value.likes ?? {})[0],\r\n                }\r\n            })\r\n            setTitle(databaseRoom.title)\r\n            setQuestions(parseQuestions)\r\n        })\r\n\r\n        return () => {\r\n            database.off(roomRef, 'value')\r\n        }\r\n    }, [roomId, user?.id])\r\n\r\n    return {questions, title}\r\n}\r\n\r\nexport{useRoom}","import { FormEvent, useState } from 'react'\r\nimport { useParams } from 'react-router-dom'\r\nimport logoImg from '../assets/images/logo.svg'\r\nimport { Button } from '../components/Button'\r\nimport { Question } from '../components/Question'\r\nimport { RoomCode } from '../components/RoomCode'\r\nimport { useAuth } from '../hooks/useAuth'\r\nimport { useRoom } from '../hooks/useRoom'\r\nimport { database } from '../services/firebase'\r\nimport \"../styles/room.scss\"\r\nimport { Reference } from '../utilities/Reference'\r\n\r\n\r\n\r\n\r\ntype RoomParams = {\r\n    id: string;\r\n}\r\n\r\nfunction Room() {\r\n    const { user, singInWithGoogle } = useAuth()\r\n    const params = useParams<RoomParams>()\r\n    const roomId = params.id\r\n    const [newQuestion, setNewQuestion] = useState('')\r\n    const {title, questions} = useRoom(roomId)\r\n\r\n    \r\n\r\n    async function handleSendQuestion(event: FormEvent) {\r\n        event.preventDefault()\r\n\r\n        if (newQuestion.trim() === \"\") {\r\n            return\r\n        }\r\n\r\n        if (!user) {\r\n            throw new Error('You must be logged in')\r\n        }\r\n\r\n        const question = {\r\n            content: newQuestion,\r\n            author: {\r\n                name: user.name,\r\n                avatar: user.avatar\r\n            },\r\n            isHighlighted: false,\r\n            isAnswered: false\r\n        }\r\n\r\n        const questionRef = await Reference(`rooms/${roomId}/questions`)\r\n        database.push(questionRef, question)\r\n\r\n        setNewQuestion('')\r\n    }\r\n\r\n    async function handleLikeQuestion(questionId: string, likeId: string | undefined) {\r\n        if(likeId) {\r\n            const newLike = await Reference(`rooms/${roomId}/questions/${questionId}/likes/${likeId}`)\r\n\r\n            database.remove(newLike)\r\n            console.log(likeId)\r\n        } else {\r\n            const newLike = await Reference(`rooms/${roomId}/questions/${questionId}/likes`)\r\n\r\n            database.push(newLike, {authorId: user?.id})\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div id=\"page-room\">\r\n            <header>\r\n                <div className=\"content\">\r\n                    <img src={logoImg} alt=\"Letmeask\" />\r\n                    <div>\r\n                        <RoomCode code={roomId} />\r\n                    </div>\r\n                </div>\r\n            </header>\r\n\r\n            <main>\r\n                <div className=\"room-title\">\r\n                    <h1>Sala {title}</h1>\r\n                    {questions.length > 0 && <span>{questions.length} pergunta(s)</span>}\r\n                </div>\r\n\r\n                <form onSubmit={handleSendQuestion}>\r\n                    <textarea\r\n                        placeholder=\"O que você quer perguntar\"\r\n                        onChange={event => setNewQuestion(event.target.value)}\r\n                        value={newQuestion}\r\n                    />\r\n\r\n                    <div className=\"form-footer\">\r\n                        {user ? (\r\n                            <div className=\"user-info\">\r\n                                <img src={user.avatar} alt={user.name} />\r\n                                <span>{user.name}</span>\r\n                            </div>\r\n                        ) : (\r\n                            <span>\r\n                                Para enviar uma pergunta, <button onClick={singInWithGoogle}>faça o seu login</button>.\r\n                            </span>\r\n                        )}\r\n                        <Button type=\"submit\" disabled={!user}>Enviar pergunta</Button>\r\n                    </div>\r\n                </form>\r\n\r\n                <div className=\"list-questions\">\r\n                    {questions.map(question => {\r\n                        return (\r\n                            <Question\r\n                                key={question.id}\r\n                                content={question.content}\r\n                                author={question.author}\r\n                                isAnswered={question.isAnswered}\r\n                                isHighlighted={question.isHighlighted}\r\n                            >\r\n                                {!question.isAnswered && (\r\n                                    <button\r\n                                        className={`Like-button ${question.likeId ? 'liked' : ''}`}\r\n                                        type=\"button\"\r\n                                        aria-label=\"Marcar como gostei.\"\r\n                                        onClick={() => handleLikeQuestion(question.id, question.likeId)}\r\n                                    >\r\n                                        {question.likeCount > 0 && <span>{question.likeCount}</span>}\r\n                                        <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                                            <path d=\"M7 22H4C3.46957 22 2.96086 21.7893 2.58579 21.4142C2.21071 21.0391 2 20.5304 2 20V13C2 12.4696 2.21071 11.9609 2.58579 11.5858C2.96086 11.2107 3.46957 11 4 11H7M14 9V5C14 4.20435 13.6839 3.44129 13.1213 2.87868C12.5587 2.31607 11.7956 2 11 2L7 11V22H18.28C18.7623 22.0055 19.2304 21.8364 19.5979 21.524C19.9654 21.2116 20.2077 20.7769 20.28 20.3L21.66 11.3C21.7035 11.0134 21.6842 10.7207 21.6033 10.4423C21.5225 10.1638 21.3821 9.90629 21.1919 9.68751C21.0016 9.46873 20.7661 9.29393 20.5016 9.17522C20.2371 9.0565 19.9499 8.99672 19.66 9H14Z\" stroke=\"#737380\" strokeWidth=\"1.5\" strokeLinecap=\"round\" strokeLinejoin=\"round\" />\r\n                                        </svg>\r\n                                    </button>\r\n                                )}\r\n                            </Question>\r\n                        )\r\n                    })}\r\n                </div>\r\n            </main>\r\n        </div >\r\n    )\r\n}\r\n\r\nexport { Room }","export default __webpack_public_path__ + \"static/media/check.5dfa6ed6.svg\";","export default __webpack_public_path__ + \"static/media/answer.4502a8d5.svg\";","export default __webpack_public_path__ + \"static/media/delete.22ba6e00.svg\";","import { useHistory, useParams } from 'react-router-dom'\r\nimport logoImg from '../assets/images/logo.svg'\r\nimport checkImg from '../assets/images/check.svg'\r\nimport answerImg from '../assets/images/answer.svg'\r\nimport deleteImg from '../assets/images/delete.svg'\r\nimport { Button } from '../components/Button'\r\nimport { Question } from '../components/Question'\r\nimport { RoomCode } from '../components/RoomCode'\r\nimport { useRoom } from '../hooks/useRoom'\r\nimport \"../styles/room.scss\"\r\nimport { Reference } from '../utilities/Reference'\r\nimport { database } from '../services/firebase'\r\n\r\n\r\n\r\n\r\ntype RoomParams = {\r\n    id: string;\r\n}\r\n\r\nfunction AdminRoom() {\r\n    const history = useHistory()\r\n    const params = useParams<RoomParams>()\r\n    const roomId = params.id\r\n    const {title, questions} = useRoom(roomId)\r\n\r\n    async function handleEndRoom() {\r\n        const roomRef = Reference(`rooms/${roomId}`)\r\n        await database.update(roomRef, {\r\n            endedAt: new Date()\r\n        })\r\n\r\n        history.push('/')\r\n    }\r\n\r\n    async function handleDeleteQuestion(questionId: string) {\r\n        if(window.confirm('Tem certeza que deseja excluir essa pergunta?')) {\r\n            const questionRef = Reference(`rooms/${roomId}/questions/${questionId}`)\r\n            await database.remove(questionRef)\r\n        }\r\n\r\n    }\r\n\r\n    async function handleCheckQuestionAsAnswered(questionId:string) {\r\n        const questionRef = Reference(`rooms/${roomId}/questions/${questionId}`)\r\n        await database.update(questionRef, {\r\n          isAnswered: true  \r\n        })\r\n    }\r\n\r\n    async function handleHighlightQuestion(questionId:string) {\r\n        const questionRef = Reference(`rooms/${roomId}/questions/${questionId}`)\r\n        await database.update(questionRef, {\r\n          isHighlighted: true  \r\n        })\r\n    }\r\n\r\n\r\n    return (\r\n        <div id=\"page-room\">\r\n            <header>\r\n                <div className=\"content\">\r\n                    <img src={logoImg} alt=\"Letmeask\" />\r\n                    <div>\r\n                        <RoomCode code={roomId} />\r\n                        <Button onClick={handleEndRoom} isOutlined>Encerrar Sala</Button>\r\n                    </div>\r\n                </div>\r\n            </header>\r\n\r\n            <main>\r\n                <div className=\"room-title\">\r\n                    <h1>Sala {title}</h1>\r\n                    {questions.length > 0 && <span>{questions.length} pergunta(s)</span>}\r\n                </div>\r\n\r\n                <div className=\"list-questions\">\r\n                    {questions.map(question => {\r\n                        return (\r\n                            <Question\r\n                                key={question.id}\r\n                                content={question.content}\r\n                                author={question.author}\r\n                                isAnswered={question.isAnswered}\r\n                                isHighlighted={question.isHighlighted}\r\n                            >\r\n                                <div>\r\n                                    <button\r\n                                        type=\"button\"\r\n                                        onClick={() => handleCheckQuestionAsAnswered(question.id)}>\r\n                                        <img src={checkImg} alt=\"Marcar pergunta como respondida\" />\r\n                                    </button>\r\n                                    <button\r\n                                        type=\"button\"\r\n                                        onClick={() => handleHighlightQuestion(question.id)}>\r\n                                        <img src={answerImg} alt=\"Dar destaque a pergunta\" />\r\n                                    </button>\r\n                                    <button\r\n                                        type=\"button\"\r\n                                        onClick={() => handleDeleteQuestion(question.id)}>\r\n                                        <img src={deleteImg} alt=\"Remover pergunta\" />\r\n                                    </button>\r\n                                </div>\r\n                            </Question>\r\n                        )\r\n                    })}\r\n                </div>\r\n            </main>\r\n        </div >\r\n    )\r\n}\r\n\r\nexport { AdminRoom }","import { BrowserRouter, Route, Switch } from \"react-router-dom\";\r\n\r\nimport { Home } from \"./pages/Home\";\r\nimport { NewRoom } from \"./pages/NewRoom\";\r\n\r\nimport { AuthContextProvider } from \"./contexts/AuthContext\";\r\nimport { Room } from \"./pages/Room\";\r\nimport { AdminRoom } from \"./pages/AdminRoom\";\r\n\r\nfunction App() {\r\n\r\n  return (\r\n    <BrowserRouter>\r\n      <AuthContextProvider>\r\n        <Switch>\r\n          <Route path=\"/\" exact component={Home}/>\r\n\r\n          <Route path=\"/rooms/new\" component={NewRoom}/>\r\n\r\n          <Route path=\"/rooms/:id\" component={Room}/>\r\n\r\n          <Route path=\"/admin/rooms/:id\" component={AdminRoom}/>\r\n        </Switch>\r\n      </AuthContextProvider>\r\n    </BrowserRouter>\r\n  )\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nimport './services/firebase'\n\nimport './styles/global.scss'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}